<!DOCTYPE html>
<html>
<head>
  <title>Realistic 3D Earth</title>
  <style>
    body { margin: 0; overflow: hidden; }
    canvas { width: 100%; height: 100%; }
  </style>
</head>
<body>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r134/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.134.0/examples/js/controls/OrbitControls.js"></script>
  <script>
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Load Textures (NASA/Blue Marble style)
    const loader = new THREE.TextureLoader();
    const earthTexture = loader.load("https://planet-texture-assets.s3.eu-central-1.amazonaws.com/earth_daymap.jpg");
    const nightTexture = loader.load("https://planet-texture-assets.s3.eu-central-1.amazonaws.com/earth_nightmap.jpg");
    const specTexture = loader.load("https://planet-texture-assets.s3.eu-central-1.amazonaws.com/earth_specularmap.jpg");
    const cloudTexture = loader.load("https://planet-texture-assets.s3.eu-central-1.amazonaws.com/earth_clouds.png");

    // Earth sphere
    const earthGeometry = new THREE.SphereGeometry(5, 64, 64);
    const earthMaterial = new THREE.MeshPhongMaterial({
      map: earthTexture,
      specularMap: specTexture,
      specular: new THREE.Color("grey"),
      shininess: 15,
    });
    const earth = new THREE.Mesh(earthGeometry, earthMaterial);
    scene.add(earth);

    // Night lights overlay
    const nightMaterial = new THREE.MeshBasicMaterial({
      map: nightTexture,
      blending: THREE.AdditiveBlending,
      transparent: true,
      opacity: 0.5
    });
    const earthNight = new THREE.Mesh(earthGeometry, nightMaterial);
    scene.add(earthNight);

    // Clouds
    const cloudGeometry = new THREE.SphereGeometry(5.05, 64, 64);
    const cloudMaterial = new THREE.MeshPhongMaterial({
      map: cloudTexture,
      transparent: true,
      opacity: 0.4,
      depthWrite: false
    });
    const clouds = new THREE.Mesh(cloudGeometry, cloudMaterial);
    scene.add(clouds);

    // Atmosphere glow
    const atmosphereGeometry = new THREE.SphereGeometry(5.2, 64, 64);
    const atmosphereMaterial = new THREE.ShaderMaterial({
      vertexShader: `
        varying vec3 vNormal;
        void main() {
          vNormal = normalize(normalMatrix * normal);
          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
      `,
      fragmentShader: `
        varying vec3 vNormal;
        void main() {
          float intensity = pow(0.6 - dot(vNormal, vec3(0.0, 0.0, 1.0)), 2.0);
          gl_FragColor = vec4(0.3, 0.6, 1.0, 0.4) * intensity;
        }
      `,
      blending: THREE.AdditiveBlending,
      side: THREE.BackSide,
      transparent: true
    });
    const atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);
    scene.add(atmosphere);

    // Lighting
    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(5, 3, 5);
    scene.add(light);
    scene.add(new THREE.AmbientLight(0x333333));

    // Starfield background
    const starsGeometry = new THREE.SphereGeometry(90, 64, 64);
    const starsMaterial = new THREE.MeshBasicMaterial({
      map: loader.load("https://cdn.jsdelivr.net/gh/mrdoob/three.js@r134/examples/textures/space/starfield.jpg"),
      side: THREE.BackSide
    });
    const stars = new THREE.Mesh(starsGeometry, starsMaterial);
    scene.add(stars);

    // Camera & Controls
    camera.position.z = 12;
    const controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;

    // Animate
    function animate() {
      requestAnimationFrame(animate);
      earth.rotation.y += 0.001;
      earthNight.rotation.y += 0.001;
      clouds.rotation.y += 0.0015;
      controls.update();
      renderer.render(scene, camera);
    }
    animate();

    // Resize
    window.addEventListener("resize", () => {
      renderer.setSize(window.innerWidth, window.innerHeight);
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
    });
  </script>
</body>
</html>
