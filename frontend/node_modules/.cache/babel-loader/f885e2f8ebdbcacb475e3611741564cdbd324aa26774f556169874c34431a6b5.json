{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\BugSquash6-Geoshield\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { MapContainer, TileLayer, Marker, Tooltip, Polyline, LayersControl } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  BaseLayer\n} = LayersControl;\nconst indiaCenter = [22.0, 79.0];\n\n// Default icons (use Leaflet markers instead of custom images for now)\nconst planeIcon = new L.Icon.Default();\nconst selectedIcon = new L.Icon.Default();\nconst alertIcon = new L.Icon.Default();\nfunction Legend() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"legend\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: \"green\",\n          fontWeight: \"bold\"\n        },\n        children: \"\\u25CF SAFE plane\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: \"red\",\n          fontWeight: \"bold\"\n        },\n        children: \"\\u25CF SPOOFED plane\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: \"blue\"\n        },\n        children: \"\\u2500 Historical trajectory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: \"orange\"\n        },\n        children: \"\\u2500 Predicted path\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\u26A0 Alert icon = Off trajectory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_c = Legend;\nfunction Sidebar({\n  planes,\n  speedETA,\n  selectedPlane,\n  setSelectedPlane\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Planes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), Object.keys(planes).map(plane => {\n      const info = speedETA[plane] || {};\n      const isSelected = plane === selectedPlane;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `plane-item ${isSelected ? \"selected\" : \"\"}`,\n        onClick: () => setSelectedPlane(plane),\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: plane\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), \" (\", planes[plane].status, \")\", info.speed && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Speed: \", info.speed, \" m/s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 28\n        }, this), info.eta && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"ETA: \", info.eta, \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 26\n        }, this)]\n      }, plane, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Sidebar;\nfunction App() {\n  _s();\n  const [planes, setPlanes] = useState({});\n  const [trajectories, setTrajectories] = useState({});\n  const [targets, setTargets] = useState({});\n  const [predictions, setPredictions] = useState({});\n  const [speedETA, setSpeedETA] = useState({});\n  const [selectedPlane, setSelectedPlane] = useState(null);\n  const [simulationStarted, setSimulationStarted] = useState(false);\n  const audioRef = useRef(new Audio(\"https://actions.google.com/sounds/v1/alarms/beep_short.ogg\"));\n\n  // Fetch plane data from backend\n  useEffect(() => {\n    const fetchPlanes = async () => {\n      if (!simulationStarted) return;\n      try {\n        const csvFiles = [\"gps_data.csv\", \"sample_real.csv\", \"sample_spoofed.csv\"];\n        const signature = await hashHMAC(csvFiles.join(\",\"), \"supersecretkey\");\n        const res = await fetch(\"http://localhost:5000/live_planes_multi\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            csv_files: csvFiles,\n            signature\n          })\n        });\n        const data = await res.json();\n        setPlanes(prev => {\n          const updated = {\n            ...prev\n          };\n          const newTargets = {};\n          const newPredictions = {};\n          const newSpeedETA = {};\n          Object.keys(data).forEach(plane => {\n            var _prev$plane;\n            const current = data[plane].current;\n            const predicted = data[plane].predicted;\n            if (!prev[plane]) updated[plane] = {\n              lat: current.lat,\n              lon: current.lon,\n              status: current.status\n            };\n            if (current.status === \"SPOOFED\" && ((_prev$plane = prev[plane]) === null || _prev$plane === void 0 ? void 0 : _prev$plane.status) !== \"SPOOFED\") audioRef.current.play();\n            newTargets[plane] = {\n              lat: current.lat,\n              lon: current.lon,\n              status: current.status\n            };\n            newPredictions[plane] = predicted.map(p => [p.lat, p.lon]);\n            if (!trajectories[plane]) trajectories[plane] = [];\n            trajectories[plane].push([current.lat, current.lon]);\n            if (trajectories[plane].length >= 2 && predicted.length > 0) {\n              const prevPos = trajectories[plane][trajectories[plane].length - 2];\n              const currPos = [current.lat, current.lon];\n              const dist = L.latLng(prevPos).distanceTo(L.latLng(currPos));\n              const speed = dist;\n              const etaDist = L.latLng(currPos).distanceTo(L.latLng(predicted[0]));\n              const eta = (speed > 0 ? etaDist / speed : 0).toFixed(1);\n              newSpeedETA[plane] = {\n                speed: speed.toFixed(1),\n                eta: eta\n              };\n            }\n          });\n          setTargets(newTargets);\n          setTrajectories({\n            ...trajectories\n          });\n          setPredictions(newPredictions);\n          setSpeedETA(newSpeedETA);\n          return updated;\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    const interval = setInterval(fetchPlanes, 1000);\n    return () => clearInterval(interval);\n  }, [simulationStarted]);\n\n  // Apply latest positions\n  useEffect(() => {\n    if (!simulationStarted) return;\n    const interval = setInterval(() => {\n      setPlanes(prev => {\n        const updated = {\n          ...prev\n        };\n        Object.keys(targets).forEach(plane => {\n          const tgt = targets[plane];\n          if (!tgt) return;\n          updated[plane] = {\n            ...tgt\n          };\n        });\n        return updated;\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [targets, simulationStarted]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      planes: planes,\n      speedETA: speedETA,\n      selectedPlane: selectedPlane,\n      setSelectedPlane: setSelectedPlane\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"88%\",\n        position: \"relative\"\n      },\n      children: [!simulationStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSimulationStarted(true),\n        style: {\n          position: \"absolute\",\n          top: \"20px\",\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n          zIndex: 1000,\n          padding: \"10px 20px\",\n          fontSize: \"16px\",\n          cursor: \"pointer\"\n        },\n        children: \"Start Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: indiaCenter,\n        zoom: 5,\n        style: {\n          height: \"100vh\",\n          width: \"100%\"\n        },\n        zoomControl: true,\n        children: [/*#__PURE__*/_jsxDEV(LayersControl, {\n          position: \"topright\",\n          children: [/*#__PURE__*/_jsxDEV(BaseLayer, {\n            checked: true,\n            name: \"OpenStreetMap\",\n            children: /*#__PURE__*/_jsxDEV(TileLayer, {\n              url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BaseLayer, {\n            name: \"ESRI Satellite\",\n            children: /*#__PURE__*/_jsxDEV(TileLayer, {\n              url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BaseLayer, {\n            name: \"Topographic\",\n            children: /*#__PURE__*/_jsxDEV(TileLayer, {\n              url: \"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), Object.keys(planes).map(plane => {\n          const pos = planes[plane];\n          const pred = predictions[plane] || [];\n          const isSelected = plane === selectedPlane;\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Polyline, {\n              positions: trajectories[plane] || [],\n              color: isSelected ? \"purple\" : \"blue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this), pred.length > 0 && /*#__PURE__*/_jsxDEV(Polyline, {\n              positions: pred,\n              color: \"orange\",\n              dashArray: \"5,10\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Marker, {\n              position: [pos.lat, pos.lon],\n              icon: isSelected ? selectedIcon : planeIcon,\n              children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                direction: \"top\",\n                offset: [0, -20],\n                permanent: true,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    color: pos.status === \"SAFE\" ? \"green\" : \"red\",\n                    fontWeight: \"bold\"\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [plane, \": \", pos.status]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this)]\n          }, plane, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n}\n\n// HMAC helper\n_s(App, \"E8PHfE0bITCZ41O29kuagHQz6pI=\");\n_c3 = App;\nasync function hashHMAC(message, key) {\n  const enc = new TextEncoder();\n  const keyData = enc.encode(key);\n  const msgData = enc.encode(message);\n  const cryptoKey = await crypto.subtle.importKey(\"raw\", keyData, {\n    name: \"HMAC\",\n    hash: \"SHA-256\"\n  }, false, [\"sign\"]);\n  const sig = await crypto.subtle.sign(\"HMAC\", cryptoKey, msgData);\n  return Array.from(new Uint8Array(sig)).map(b => b.toString(16).padStart(2, '0')).join('');\n}\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Legend\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MapContainer","TileLayer","Marker","Tooltip","Polyline","LayersControl","L","jsxDEV","_jsxDEV","BaseLayer","indiaCenter","planeIcon","Icon","Default","selectedIcon","alertIcon","Legend","className","children","style","color","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","_c","Sidebar","planes","speedETA","selectedPlane","setSelectedPlane","Object","keys","map","plane","info","isSelected","onClick","status","speed","eta","_c2","App","_s","setPlanes","trajectories","setTrajectories","targets","setTargets","predictions","setPredictions","setSpeedETA","simulationStarted","setSimulationStarted","audioRef","Audio","fetchPlanes","csvFiles","signature","hashHMAC","join","res","fetch","method","headers","body","JSON","stringify","csv_files","data","json","prev","updated","newTargets","newPredictions","newSpeedETA","forEach","_prev$plane","current","predicted","lat","lon","play","p","push","length","prevPos","currPos","dist","latLng","distanceTo","etaDist","toFixed","err","console","error","interval","setInterval","clearInterval","tgt","display","width","position","top","left","transform","zIndex","padding","fontSize","cursor","center","zoom","height","zoomControl","checked","name","url","pos","pred","Fragment","positions","dashArray","icon","direction","offset","permanent","_c3","message","key","enc","TextEncoder","keyData","encode","msgData","cryptoKey","crypto","subtle","importKey","hash","sig","sign","Array","from","Uint8Array","b","toString","padStart","$RefreshReg$"],"sources":["C:/Users/ACER/BugSquash6-Geoshield/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Tooltip, Polyline, LayersControl } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./App.css\";\r\n\r\nconst { BaseLayer } = LayersControl;\r\nconst indiaCenter = [22.0, 79.0];\r\n\r\n// Default icons (use Leaflet markers instead of custom images for now)\r\nconst planeIcon = new L.Icon.Default();\r\nconst selectedIcon = new L.Icon.Default();\r\nconst alertIcon = new L.Icon.Default();\r\n\r\nfunction Legend() {\r\n  return (\r\n    <div className=\"legend\">\r\n      <div><span style={{color:\"green\", fontWeight:\"bold\"}}>● SAFE plane</span></div>\r\n      <div><span style={{color:\"red\", fontWeight:\"bold\"}}>● SPOOFED plane</span></div>\r\n      <div><span style={{color:\"blue\"}}>─ Historical trajectory</span></div>\r\n      <div><span style={{color:\"orange\"}}>─ Predicted path</span></div>\r\n      <div><span>⚠ Alert icon = Off trajectory</span></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Sidebar({ planes, speedETA, selectedPlane, setSelectedPlane }) {\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <h3>Planes</h3>\r\n      {Object.keys(planes).map(plane => {\r\n        const info = speedETA[plane] || {};\r\n        const isSelected = plane === selectedPlane;\r\n        return (\r\n          <div key={plane} \r\n               className={`plane-item ${isSelected ? \"selected\" : \"\"}`} \r\n               onClick={() => setSelectedPlane(plane)}>\r\n            <strong>{plane}</strong> ({planes[plane].status})\r\n            {info.speed && <div>Speed: {info.speed} m/s</div>}\r\n            {info.eta && <div>ETA: {info.eta}s</div>}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const [planes, setPlanes] = useState({});\r\n  const [trajectories, setTrajectories] = useState({});\r\n  const [targets, setTargets] = useState({});\r\n  const [predictions, setPredictions] = useState({});\r\n  const [speedETA, setSpeedETA] = useState({});\r\n  const [selectedPlane, setSelectedPlane] = useState(null);\r\n  const [simulationStarted, setSimulationStarted] = useState(false);\r\n  const audioRef = useRef(new Audio(\"https://actions.google.com/sounds/v1/alarms/beep_short.ogg\"));\r\n\r\n  // Fetch plane data from backend\r\n  useEffect(() => {\r\n    const fetchPlanes = async () => {\r\n      if (!simulationStarted) return;\r\n\r\n      try {\r\n        const csvFiles = [\"gps_data.csv\", \"sample_real.csv\", \"sample_spoofed.csv\"];\r\n        const signature = await hashHMAC(csvFiles.join(\",\"), \"supersecretkey\");\r\n\r\n        const res = await fetch(\"http://localhost:5000/live_planes_multi\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({ csv_files: csvFiles, signature })\r\n        });\r\n        const data = await res.json();\r\n\r\n        setPlanes(prev => {\r\n          const updated = { ...prev };\r\n          const newTargets = {};\r\n          const newPredictions = {};\r\n          const newSpeedETA = {};\r\n\r\n          Object.keys(data).forEach(plane => {\r\n            const current = data[plane].current;\r\n            const predicted = data[plane].predicted;\r\n\r\n            if (!prev[plane]) updated[plane] = { lat: current.lat, lon: current.lon, status: current.status };\r\n            if (current.status === \"SPOOFED\" && prev[plane]?.status !== \"SPOOFED\") audioRef.current.play();\r\n\r\n            newTargets[plane] = { lat: current.lat, lon: current.lon, status: current.status };\r\n            newPredictions[plane] = predicted.map(p => [p.lat, p.lon]);\r\n\r\n            if (!trajectories[plane]) trajectories[plane] = [];\r\n            trajectories[plane].push([current.lat, current.lon]);\r\n\r\n            if (trajectories[plane].length >= 2 && predicted.length > 0) {\r\n              const prevPos = trajectories[plane][trajectories[plane].length - 2];\r\n              const currPos = [current.lat, current.lon];\r\n              const dist = L.latLng(prevPos).distanceTo(L.latLng(currPos));\r\n              const speed = dist;\r\n              const etaDist = L.latLng(currPos).distanceTo(L.latLng(predicted[0]));\r\n              const eta = (speed > 0 ? etaDist / speed : 0).toFixed(1);\r\n              newSpeedETA[plane] = { speed: speed.toFixed(1), eta: eta };\r\n            }\r\n          });\r\n\r\n          setTargets(newTargets);\r\n          setTrajectories({ ...trajectories });\r\n          setPredictions(newPredictions);\r\n          setSpeedETA(newSpeedETA);\r\n\r\n          return updated;\r\n        });\r\n\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    const interval = setInterval(fetchPlanes, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [simulationStarted]);\r\n\r\n  // Apply latest positions\r\n  useEffect(() => {\r\n    if (!simulationStarted) return;\r\n\r\n    const interval = setInterval(() => {\r\n      setPlanes(prev => {\r\n        const updated = { ...prev };\r\n        Object.keys(targets).forEach(plane => {\r\n          const tgt = targets[plane];\r\n          if (!tgt) return;\r\n          updated[plane] = { ...tgt };\r\n        });\r\n        return updated;\r\n      });\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [targets, simulationStarted]);\r\n\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <Sidebar planes={planes} speedETA={speedETA} selectedPlane={selectedPlane} setSelectedPlane={setSelectedPlane} />\r\n\r\n      <div style={{ width: \"88%\", position: \"relative\" }}>\r\n        {!simulationStarted && (\r\n          <button\r\n            onClick={() => setSimulationStarted(true)}\r\n            style={{\r\n              position: \"absolute\",\r\n              top: \"20px\",\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 1000,\r\n              padding: \"10px 20px\",\r\n              fontSize: \"16px\",\r\n              cursor: \"pointer\"\r\n            }}\r\n          >\r\n            Start Simulation\r\n          </button>\r\n        )}\r\n\r\n        <MapContainer center={indiaCenter} zoom={5} style={{ height: \"100vh\", width: \"100%\" }} zoomControl={true}>\r\n          <LayersControl position=\"topright\">\r\n            <BaseLayer checked name=\"OpenStreetMap\">\r\n              <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n            </BaseLayer>\r\n            <BaseLayer name=\"ESRI Satellite\">\r\n              <TileLayer url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" />\r\n            </BaseLayer>\r\n            <BaseLayer name=\"Topographic\">\r\n              <TileLayer url=\"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\" />\r\n            </BaseLayer>\r\n          </LayersControl>\r\n\r\n          {Object.keys(planes).map(plane => {\r\n            const pos = planes[plane];\r\n            const pred = predictions[plane] || [];\r\n            const isSelected = plane === selectedPlane;\r\n\r\n            return (\r\n              <React.Fragment key={plane}>\r\n                <Polyline positions={trajectories[plane] || []} color={isSelected ? \"purple\" : \"blue\"} />\r\n                {pred.length > 0 && <Polyline positions={pred} color=\"orange\" dashArray=\"5,10\" />}\r\n\r\n                <Marker position={[pos.lat, pos.lon]} icon={isSelected ? selectedIcon : planeIcon}>\r\n                  <Tooltip direction=\"top\" offset={[0, -20]} permanent>\r\n                    <div style={{ color: pos.status === \"SAFE\" ? \"green\" : \"red\", fontWeight: \"bold\" }}>\r\n                      <div>{plane}: {pos.status}</div>\r\n                    </div>\r\n                  </Tooltip>\r\n                </Marker>\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n\r\n          <Legend />\r\n        </MapContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// HMAC helper\r\nasync function hashHMAC(message, key) {\r\n  const enc = new TextEncoder();\r\n  const keyData = enc.encode(key);\r\n  const msgData = enc.encode(message);\r\n  const cryptoKey = await crypto.subtle.importKey(\r\n    \"raw\",\r\n    keyData,\r\n    { name: \"HMAC\", hash: \"SHA-256\" },\r\n    false,\r\n    [\"sign\"]\r\n  );\r\n  const sig = await crypto.subtle.sign(\"HMAC\", cryptoKey, msgData);\r\n  return Array.from(new Uint8Array(sig)).map(b => b.toString(16).padStart(2, '0')).join('');\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}