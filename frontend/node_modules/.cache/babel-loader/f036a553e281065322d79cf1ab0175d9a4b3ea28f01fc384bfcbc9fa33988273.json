{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\BugSquash6-Geoshield\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { MapContainer, TileLayer, Marker, Tooltip, Polyline, LayersControl } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  BaseLayer\n} = LayersControl;\nconst indiaCenter = [22.0, 79.0];\nconst planeIcon = new L.Icon({\n  iconUrl: process.env.PUBLIC_URL + \"/plane.png\",\n  iconSize: [32, 32],\n  iconAnchor: [16, 16]\n});\nconst alertIcon = new L.Icon({\n  iconUrl: process.env.PUBLIC_URL + \"/alert.png\",\n  iconSize: [24, 24],\n  iconAnchor: [12, 12]\n});\nfunction Sidebar({\n  planes\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Planes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), Object.keys(planes).map(plane => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: plane\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this), \" (\", planes[plane].status, \")\"]\n    }, plane, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_c = Sidebar;\nfunction App() {\n  _s();\n  const [planes, setPlanes] = useState({});\n  const [trajectories, setTrajectories] = useState({});\n  const [simulationStarted, setSimulationStarted] = useState(false);\n  const audioRef = useRef(new Audio(\"https://actions.google.com/sounds/v1/alarms/beep_short.ogg\"));\n\n  // Fetch trajectories once at start\n  const startSimulation = async () => {\n    const csvFiles = [\"gps_data.csv\", \"sample_real.csv\", \"sample_spoofed.csv\"];\n    const signature = await hashHMAC(csvFiles.join(\",\"), \"supersecretkey\");\n    const res = await fetch(\"http://localhost:5000/live_planes_multi\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        csv_files: csvFiles,\n        signature\n      })\n    });\n    const data = await res.json();\n    const trajs = {};\n    const startPositions = {};\n    Object.keys(data).forEach(plane => {\n      const allPoints = data[plane].trajectory; // use full trajectory\n\n      // Interpolate into ~60 steps (1 min flight)\n      const interpolated = interpolatePath(allPoints, 60);\n      trajs[plane] = interpolated;\n      startPositions[plane] = {\n        lat: interpolated[0].lat,\n        lon: interpolated[0].lon,\n        status: interpolated[0].status\n      };\n    });\n    setPlanes(startPositions);\n    setTrajectories(trajs);\n    setSimulationStarted(true);\n  };\n\n  // Step along trajectory (1 point per second)\n  useEffect(() => {\n    if (!simulationStarted) return;\n    const intervals = {};\n    Object.keys(trajectories).forEach(plane => {\n      let index = 0;\n      intervals[plane] = setInterval(() => {\n        setPlanes(prev => {\n          if (index < trajectories[plane].length) {\n            return {\n              ...prev,\n              [plane]: {\n                ...prev[plane],\n                lat: trajectories[plane][index].lat,\n                lon: trajectories[plane][index].lon,\n                status: trajectories[plane][index].status\n              }\n            };\n          }\n          return prev;\n        });\n        index++;\n      }, 1000); // update every second\n    });\n    return () => {\n      Object.values(intervals).forEach(clearInterval);\n    };\n  }, [simulationStarted, trajectories]);\n\n  // Drag spoof detection\n  const handleDragEnd = (plane, e) => {\n    const pos = e.target.getLatLng();\n    const nearest = trajectories[plane] || [];\n    let minDist = Infinity;\n    nearest.forEach(p => {\n      const d = L.latLng(pos).distanceTo(L.latLng([p.lat, p.lon]));\n      if (d < minDist) minDist = d;\n    });\n    if (minDist > 50000) {\n      // 50 km off trajectory\n      setPlanes(prev => ({\n        ...prev,\n        [plane]: {\n          ...prev[plane],\n          lat: pos.lat,\n          lon: pos.lng,\n          status: \"SPOOFED\"\n        }\n      }));\n      alert(`${plane} has gone off trajectory! Spoof attack detected.`);\n      audioRef.current.play();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      planes: planes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"88%\",\n        position: \"relative\"\n      },\n      children: [!simulationStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startSimulation,\n        style: {\n          position: \"absolute\",\n          top: \"20px\",\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n          zIndex: 1000,\n          padding: \"10px 20px\",\n          fontSize: \"16px\",\n          cursor: \"pointer\"\n        },\n        children: \"Start Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: indiaCenter,\n        zoom: 5,\n        style: {\n          height: \"100vh\",\n          width: \"100%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(LayersControl, {\n          position: \"topright\",\n          children: [/*#__PURE__*/_jsxDEV(BaseLayer, {\n            checked: true,\n            name: \"OpenStreetMap\",\n            children: /*#__PURE__*/_jsxDEV(TileLayer, {\n              url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BaseLayer, {\n            name: \"ESRI Satellite\",\n            children: /*#__PURE__*/_jsxDEV(TileLayer, {\n              url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), Object.keys(planes).map(plane => {\n          const pos = planes[plane];\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Polyline, {\n              positions: (trajectories[plane] || []).map(p => [p.lat, p.lon]),\n              color: \"blue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Marker, {\n              position: [pos.lat, pos.lon],\n              icon: planeIcon,\n              draggable: true,\n              eventHandlers: {\n                dragend: e => handleDragEnd(plane, e)\n              },\n              children: /*#__PURE__*/_jsxDEV(Tooltip, {\n                direction: \"top\",\n                offset: [0, -20],\n                permanent: true,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    color: pos.status === \"SAFE\" ? \"green\" : \"red\",\n                    fontWeight: \"bold\"\n                  },\n                  children: [plane, \": \", pos.status]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 17\n            }, this), pos.status === \"SPOOFED\" && /*#__PURE__*/_jsxDEV(Marker, {\n              position: [pos.lat + 0.05, pos.lon],\n              icon: alertIcon,\n              interactive: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 19\n            }, this)]\n          }, plane, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n\n// --- Helpers ---\n\n// Interpolate a path into N steps (for smooth 1-min flight)\n_s(App, \"WqBlfYFHgrru2LbEvatRODzcjxQ=\");\n_c2 = App;\nfunction interpolatePath(points, steps) {\n  if (points.length < 2) return points;\n  const interpolated = [];\n  const totalSteps = steps;\n  for (let i = 0; i < totalSteps; i++) {\n    const t = i / (totalSteps - 1);\n    const seg = t * (points.length - 1);\n    const idx = Math.floor(seg);\n    const frac = seg - idx;\n    if (idx >= points.length - 1) {\n      interpolated.push(points[points.length - 1]);\n    } else {\n      const p1 = points[idx];\n      const p2 = points[idx + 1];\n      interpolated.push({\n        lat: p1.lat + (p2.lat - p1.lat) * frac,\n        lon: p1.lon + (p2.lon - p1.lon) * frac,\n        status: \"SAFE\"\n      });\n    }\n  }\n  return interpolated;\n}\n\n// HMAC helper\nasync function hashHMAC(message, key) {\n  const enc = new TextEncoder();\n  const keyData = enc.encode(key);\n  const msgData = enc.encode(message);\n  const cryptoKey = await crypto.subtle.importKey(\"raw\", keyData, {\n    name: \"HMAC\",\n    hash: \"SHA-256\"\n  }, false, [\"sign\"]);\n  const sig = await crypto.subtle.sign(\"HMAC\", cryptoKey, msgData);\n  return Array.from(new Uint8Array(sig)).map(b => b.toString(16).padStart(2, '0')).join('');\n}\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Sidebar\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MapContainer","TileLayer","Marker","Tooltip","Polyline","LayersControl","L","jsxDEV","_jsxDEV","BaseLayer","indiaCenter","planeIcon","Icon","iconUrl","process","env","PUBLIC_URL","iconSize","iconAnchor","alertIcon","Sidebar","planes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","plane","status","_c","App","_s","setPlanes","trajectories","setTrajectories","simulationStarted","setSimulationStarted","audioRef","Audio","startSimulation","csvFiles","signature","hashHMAC","join","res","fetch","method","headers","body","JSON","stringify","csv_files","data","json","trajs","startPositions","forEach","allPoints","trajectory","interpolated","interpolatePath","lat","lon","intervals","index","setInterval","prev","length","values","clearInterval","handleDragEnd","e","pos","target","getLatLng","nearest","minDist","Infinity","p","d","latLng","distanceTo","lng","alert","current","play","style","display","width","position","onClick","top","left","transform","zIndex","padding","fontSize","cursor","center","zoom","height","checked","name","url","Fragment","positions","color","icon","draggable","eventHandlers","dragend","direction","offset","permanent","fontWeight","interactive","_c2","points","steps","totalSteps","i","t","seg","idx","Math","floor","frac","push","p1","p2","message","key","enc","TextEncoder","keyData","encode","msgData","cryptoKey","crypto","subtle","importKey","hash","sig","sign","Array","from","Uint8Array","b","toString","padStart","$RefreshReg$"],"sources":["C:/Users/ACER/BugSquash6-Geoshield/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Tooltip, Polyline, LayersControl } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./App.css\";\r\n\r\nconst { BaseLayer } = LayersControl;\r\nconst indiaCenter = [22.0, 79.0];\r\n\r\nconst planeIcon = new L.Icon({\r\n  iconUrl: process.env.PUBLIC_URL + \"/plane.png\",\r\n  iconSize: [32, 32],\r\n  iconAnchor: [16, 16]\r\n});\r\n\r\nconst alertIcon = new L.Icon({\r\n  iconUrl: process.env.PUBLIC_URL + \"/alert.png\",\r\n  iconSize: [24, 24],\r\n  iconAnchor: [12, 12]\r\n});\r\n\r\nfunction Sidebar({ planes }) {\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <h3>Planes</h3>\r\n      {Object.keys(planes).map(plane => (\r\n        <div key={plane}>\r\n          <strong>{plane}</strong> ({planes[plane].status})\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const [planes, setPlanes] = useState({});\r\n  const [trajectories, setTrajectories] = useState({});\r\n  const [simulationStarted, setSimulationStarted] = useState(false);\r\n  const audioRef = useRef(new Audio(\"https://actions.google.com/sounds/v1/alarms/beep_short.ogg\"));\r\n\r\n  // Fetch trajectories once at start\r\n  const startSimulation = async () => {\r\n    const csvFiles = [\"gps_data.csv\", \"sample_real.csv\", \"sample_spoofed.csv\"];\r\n    const signature = await hashHMAC(csvFiles.join(\",\"), \"supersecretkey\");\r\n\r\n    const res = await fetch(\"http://localhost:5000/live_planes_multi\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ csv_files: csvFiles, signature })\r\n    });\r\n    const data = await res.json();\r\n\r\n    const trajs = {};\r\n    const startPositions = {};\r\n    Object.keys(data).forEach(plane => {\r\n      const allPoints = data[plane].trajectory; // use full trajectory\r\n\r\n      // Interpolate into ~60 steps (1 min flight)\r\n      const interpolated = interpolatePath(allPoints, 60);\r\n      trajs[plane] = interpolated;\r\n\r\n      startPositions[plane] = {\r\n        lat: interpolated[0].lat,\r\n        lon: interpolated[0].lon,\r\n        status: interpolated[0].status\r\n      };\r\n    });\r\n\r\n    setPlanes(startPositions);\r\n    setTrajectories(trajs);\r\n    setSimulationStarted(true);\r\n  };\r\n\r\n  // Step along trajectory (1 point per second)\r\n  useEffect(() => {\r\n    if (!simulationStarted) return;\r\n    const intervals = {};\r\n\r\n    Object.keys(trajectories).forEach(plane => {\r\n      let index = 0;\r\n      intervals[plane] = setInterval(() => {\r\n        setPlanes(prev => {\r\n          if (index < trajectories[plane].length) {\r\n            return {\r\n              ...prev,\r\n              [plane]: {\r\n                ...prev[plane],\r\n                lat: trajectories[plane][index].lat,\r\n                lon: trajectories[plane][index].lon,\r\n                status: trajectories[plane][index].status\r\n              }\r\n            };\r\n          }\r\n          return prev;\r\n        });\r\n        index++;\r\n      }, 1000); // update every second\r\n    });\r\n\r\n    return () => {\r\n      Object.values(intervals).forEach(clearInterval);\r\n    };\r\n  }, [simulationStarted, trajectories]);\r\n\r\n  // Drag spoof detection\r\n  const handleDragEnd = (plane, e) => {\r\n    const pos = e.target.getLatLng();\r\n    const nearest = trajectories[plane] || [];\r\n    let minDist = Infinity;\r\n    nearest.forEach(p => {\r\n      const d = L.latLng(pos).distanceTo(L.latLng([p.lat, p.lon]));\r\n      if (d < minDist) minDist = d;\r\n    });\r\n\r\n    if (minDist > 50000) { // 50 km off trajectory\r\n      setPlanes(prev => ({\r\n        ...prev,\r\n        [plane]: { ...prev[plane], lat: pos.lat, lon: pos.lng, status: \"SPOOFED\" }\r\n      }));\r\n      alert(`${plane} has gone off trajectory! Spoof attack detected.`);\r\n      audioRef.current.play();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <Sidebar planes={planes} />\r\n      <div style={{ width: \"88%\", position: \"relative\" }}>\r\n        {!simulationStarted && (\r\n          <button\r\n            onClick={startSimulation}\r\n            style={{\r\n              position: \"absolute\",\r\n              top: \"20px\",\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 1000,\r\n              padding: \"10px 20px\",\r\n              fontSize: \"16px\",\r\n              cursor: \"pointer\"\r\n            }}\r\n          >\r\n            Start Simulation\r\n          </button>\r\n        )}\r\n\r\n        <MapContainer center={indiaCenter} zoom={5} style={{ height: \"100vh\", width: \"100%\" }}>\r\n          <LayersControl position=\"topright\">\r\n            <BaseLayer checked name=\"OpenStreetMap\">\r\n              <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n            </BaseLayer>\r\n            <BaseLayer name=\"ESRI Satellite\">\r\n              <TileLayer url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" />\r\n            </BaseLayer>\r\n          </LayersControl>\r\n\r\n          {Object.keys(planes).map(plane => {\r\n            const pos = planes[plane];\r\n            return (\r\n              <React.Fragment key={plane}>\r\n                <Polyline positions={(trajectories[plane] || []).map(p => [p.lat, p.lon])} color=\"blue\" />\r\n                <Marker\r\n                  position={[pos.lat, pos.lon]}\r\n                  icon={planeIcon}\r\n                  draggable={true}\r\n                  eventHandlers={{ dragend: (e) => handleDragEnd(plane, e) }}\r\n                >\r\n                  <Tooltip direction=\"top\" offset={[0, -20]} permanent>\r\n                    <div style={{ color: pos.status === \"SAFE\" ? \"green\" : \"red\", fontWeight: \"bold\" }}>\r\n                      {plane}: {pos.status}\r\n                    </div>\r\n                  </Tooltip>\r\n                </Marker>\r\n                {pos.status === \"SPOOFED\" && (\r\n                  <Marker position={[pos.lat + 0.05, pos.lon]} icon={alertIcon} interactive={false} />\r\n                )}\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n        </MapContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// --- Helpers ---\r\n\r\n// Interpolate a path into N steps (for smooth 1-min flight)\r\nfunction interpolatePath(points, steps) {\r\n  if (points.length < 2) return points;\r\n\r\n  const interpolated = [];\r\n  const totalSteps = steps;\r\n  for (let i = 0; i < totalSteps; i++) {\r\n    const t = i / (totalSteps - 1);\r\n    const seg = t * (points.length - 1);\r\n    const idx = Math.floor(seg);\r\n    const frac = seg - idx;\r\n\r\n    if (idx >= points.length - 1) {\r\n      interpolated.push(points[points.length - 1]);\r\n    } else {\r\n      const p1 = points[idx];\r\n      const p2 = points[idx + 1];\r\n      interpolated.push({\r\n        lat: p1.lat + (p2.lat - p1.lat) * frac,\r\n        lon: p1.lon + (p2.lon - p1.lon) * frac,\r\n        status: \"SAFE\"\r\n      });\r\n    }\r\n  }\r\n  return interpolated;\r\n}\r\n\r\n// HMAC helper\r\nasync function hashHMAC(message, key) {\r\n  const enc = new TextEncoder();\r\n  const keyData = enc.encode(key);\r\n  const msgData = enc.encode(message);\r\n  const cryptoKey = await crypto.subtle.importKey(\r\n    \"raw\",\r\n    keyData,\r\n    { name: \"HMAC\", hash: \"SHA-256\" },\r\n    false,\r\n    [\"sign\"]\r\n  );\r\n  const sig = await crypto.subtle.sign(\"HMAC\", cryptoKey, msgData);\r\n  return Array.from(new Uint8Array(sig)).map(b => b.toString(16).padStart(2, '0')).join('');\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}